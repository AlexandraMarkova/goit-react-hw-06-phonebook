{"version":3,"sources":["components/Container/Container.jsx","redux/contact/contact-actions.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/contact/contact-reducer.js","redux/store.js","index.js"],"names":["Container","children","className","addContacts","createAction","name","number","payload","id","uuidv4","deleteContacts","changeFilter","ContactForm","state","nameInputId","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","contacts","find","contact","alert","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","Component","connect","items","dispatch","data","getVisibleContacts","allContacts","filter","normalizeFilter","toLowerCase","includes","onDeleteContacts","map","onClick","e","target","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.bc37f31b.chunk.js","sourcesContent":["import React from 'react';\nimport './Container.modules.css';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContacts = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nexport const deleteContacts = createAction('contacts/delete');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport { addContacts } from '../../redux/contact/contact-actions';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const unavailableName = this.props.contacts.find(\n      contact => contact.name === this.state.name,\n    );\n    if (unavailableName) {\n      alert(`${this.state.name} is already in contacts`);\n      return;\n    }\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: data => dispatch(addContacts(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { deleteContacts } from '../../redux/contact/contact-actions';\n\nconst ContactList = ({ contacts, onDeleteContacts }) =>\n  contacts !== [] ? (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: <span>{number}</span>\n          <button onClick={() => onDeleteContacts(id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  ) : null;\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizeFilter = filter.toLowerCase();\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter),\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state.contacts.items, state.contacts.filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: id => dispatch(deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contact/contact-actions';\n\nconst Filter = ({ value, onChange }) => (\n  <div>\n    <label>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\n\nimport Container from './components/Container/Container';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nconst App = () => (\n  <Container>\n    <div>\n      <h1>Phonebook</h1>\n\n      <ContactForm />\n\n      <h2>Contacts</h2>\n\n      <Filter />\n\n      <ContactList />\n    </div>\n  </Container>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './contact-actions';\n\nconst items = createReducer([], {\n  [actions.addContacts]: (state, actions) => [...state, actions.payload],\n  [actions.deleteContacts]: (state, actions) =>\n    state.filter(({ id }) => id !== actions.payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport contactsReducer from './contact/contact-reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware: middleware,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}